#!/bin/bash

if ! [ $# -eq 2 ]; then
    APP_NAME="$(basename $0)"
    echo "${APP_NAME}: usage is: ${APP_NAME} {TIMEOUT} {SYS_SIZE}"
    echo -e "TIMEOUT:\tBuild time in minutes before machine is powered off"
    echo -e "SYS_SIZE:\tTotal system disks size in GBi"
    exit 1
fi

DT="$(date --utc --iso-8601=seconds)"
BOOTPATH=boot
TIMEOUT="$((($1-1)*60))"
# ceiling of system image size if decimal 
SYS_SIZE="$(echo $2|awk '{print $1%1?int($1)+1:$1}')"

rm -rf "$BOOTPATH"
mkdir "$BOOTPATH"
cp -f fetch/linux "$BOOTPATH"
cp -f fetch/initrd.gz "$BOOTPATH"
cp -f edk2-aarch64-code.fd.bz2 "$BOOTPATH"
bzip2 -d "$BOOTPATH/edk2-aarch64-code.fd.bz2"

# add shutdown hook
cd "$BOOTPATH"
gzip -d initrd.gz
cpio -H newc -F initrd -idmv etc/inittab
echo '::shutdown:/onfail.sh' >>etc/inittab
echo etc/inittab|cpio -H newc -F initrd -oAv
gzip initrd
cd -

# set watchdog
sed "s/TIMEOUT/${TIMEOUT}/g" -i ./watchdog.sh
echo "WATCHDOG: timeout = $TIMEOUT"
# add preseed
ls ./preseed.cfg ./setmirror.sh ./watchdog.sh ./onfail.sh|cpio -H newc -R +0:+0 -o|gzip >>"$BOOTPATH/initrd.gz"

# create system image hd
for i in $(seq 1 "${SYS_SIZE}"); do rm -f "$BOOTPATH/sys_$i.img"; done
for i in $(seq 1 "${SYS_SIZE}"); do qemu-img create -f qcow2 "$BOOTPATH/sys_$i.img" 1G; done
ls -l "$BOOTPATH"
exit

qemu-system-aarch64 \
    -d unimp,guest_errors \
    -D qemu.log \
    -serial mon:stdio \
    -machine virt,virtualization=true,kernel_irqchip=on,gic-version=3 \
    -cpu cortex-a53 \
    -m 512M \
    -kernel "$BOOTPATH/linux" \
    -initrd "$BOOTPATH/initrd.gz" \
    -append "earlyprintk=serial console=ttyAMA0 BOOT_DEBUG=0 DEBIAN_FRONTEND=text debconf/priority=critical auto-install/enable=true" \
    -nographic \
    -netdev user,id=net0 \
    -device driver=virtio-net-pci,netdev=net0 \
    -object rng-random,filename=/dev/urandom,id=rng0 \
    -device virtio-rng-pci,rng=rng0 \
    -rtc base=utc,clock=host \
    -device virtio-scsi-pci,id=scsi0 \
    -device scsi-hd,drive=syshd,bus=scsi0.0,channel=0,scsi-id=0,lun=0 \
    -drive file="$BOOTPATH/sys.img",format=qcow2,if=none,id=syshd
#    -cdrom https://nl.alpinelinux.org/alpine/latest-stable/releases/aarch64/alpine-standard-3.13.5-aarch64.iso
#    -machine dumpdtb=virt.dtb \
#    -bios "edk2-aarch64-code.fd" \
#    -append "earlyprintk=serial console=ttyAMA0 init=/bin/ash" \
#    -append "earlyprintk=serial console=ttyAMA0 DEBIAN_FRONTEND=text debconf/priority=low" \

cd "$BOOTPATH"
md5sum linux initrd.gz sys.img >MD5SUMS
cd -

# if terminal then reset
if [ -t 0 -a -t 1 -a -t 2 ]
then
    reset
fi
